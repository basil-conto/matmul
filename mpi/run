#!/bin/sh

# ------------------------------------------------------------------------------
# Convenience build script for the MatMul matrix multiplicaton program using
# Open MPI.
#
# Copyright (c) 2015, Basil L. Contovounesios <contovob@tcd.ie>
#
# This code is distributed under the BSD3 license. See LICENSE.
# ------------------------------------------------------------------------------

# CONSTANTS --------------------------------------------------------------------

TIME_RE='[0-9]\+'   # Regex matching execution time in milliseconds
CTRL_RE='Control'   # Start of output line containing control time
MULT_RE='Matmul'    # Start of output line containing matmul  time

TARGET='./matmul'                           # Target executable
PROCS=$( getconf _NPROCESSORS_ONLN )        # # MPI processes == # cores
RUN_CMD="mpiexec -np ${PROCS} ${TARGET}"

USAGE=\
'NAME
    run - convenience build script for the matmul program.

SYNOPSIS
    ./run [ -d | -r [ <reps> ] ] <size>
    ./run [ -d | -r [ <reps> ] ] <A nrows> <A ncols> <B nrows> <B ncols>
    ./run -c
    ./run -h

DESCRIPTION
    Runs the matmul matrix multiplication program, optionally in debug mode,
    with the given matrix dimensions.

OPTIONS
    -c, --clean
        Invoke "make clean".

    -d, --debug
        Run in debug mode, printing the elements of the input and resultant
        matrices.

    -h, --help
        Print this help message.

    -r [REPS], --repeat[=REPS]
        Run matmul repeatedly to calculate average execution times. The default
        number of repetitions is 8.'

# VARIABLES --------------------------------------------------------------------

cppflag=''              # Optional pre-processor flags, e.g. DEBUG

repeats=8               # Default number of runs for calculating average times
total_ctrl_time=0       # Total time for control function over all runs
total_mult_time=0       # Total time for matmul  function over all runs
output=''               # Target output (containing execution times)

# FUNCTIONS --------------------------------------------------------------------

# Prints the error message corresponding to, and exits with, the given status
# code.
exit_error() {
  printf 'run: '
  case "$1" in
    1) printf "expected matrix dimension, but found: $2" ;;
    2) printf 'expected 1 or 4 matrix dimensions' ;;
    3) printf "invalid number of repeats: $2" ;;
    4) printf 'invalid number of arguments' ;;
    *)
      printf 'there has been a terrible blunder, abandon all hope!\n'
      exit 255
      ;;
  esac
  printf '\nTry "./run --help" for more information.\n'
  exit "$1"
}

# Determines whether the given argument is a natural number.
natural_num() {
  case "$1" in
    '' | *[!0-9]*) return 1 ;;
                *) return 0 ;;
  esac
}

# Exits unsuccessfully if any of the given arguments is not a natural number.
assert_dimens() {
  for dimen in "$@"; do
    natural_num "${dimen}" || exit_error 1 "${dimen}"
  done
}

# Expects 1 or 4 valid matrix dimensions (i.e. natural numbers) with which to
# run the target. Invokes "make clean" and "make" with pre-processor flags
# determined by the variable ${cppflag} beforehand.
run_with() {
  assert_dimens "$@"
  case "$#" in
    1) set -- "$1 $1 $1 $1" ;;
    4) ;;
    *) exit_error 2 ;;
  esac
  make clean && make CPPFLAGS="${cppflag}" && ${RUN_CMD} $@
}

# Uses the regular expressions defined at the start of this file to extract
# the execution times of either one of the multiplication routines from the
# target's output.
extract_time() {
  echo "${output}" | grep -o "$1 .*${TIME_RE}" | grep -o "${TIME_RE}"
}

# Similar to run_with(), but runs the target a number of times determined by the
# variable ${repeats} and prints the average execution times and speedup of the
# multiplication routines.
repeat() {
  assert_dimens "$@"

  [ "$#" -eq 1 ] && set -- "$1 $1 $1 $1"

  make clean && make || exit

  i=1;
  while [ "${i}" -le "${repeats}" ]; do
    printf '\r[ %d / %d ]' "${i}" "${repeats}"
    output=$( ${RUN_CMD} $@ )
    ctrl_time=$( extract_time "${CTRL_RE}" )
    mult_time=$( extract_time "${MULT_RE}" )
    total_ctrl_time=$(( ${total_ctrl_time} + ${ctrl_time} ))
    total_mult_time=$(( ${total_mult_time} + ${mult_time} ))
    i=$(( ${i} + 1 ))
  done

  avg_ctrl_time=$(( ${total_ctrl_time} / ${repeats} ))
  avg_mult_time=$(( ${total_mult_time} / ${repeats} ))

  echo ''
  printf 'Avg. control time : %9d\n' "${avg_ctrl_time}"
  printf 'Avg. matmul  time : %9d\n' "${avg_mult_time}"

  if [ "${avg_ctrl_time}" -gt 0 ] && [ "${avg_mult_time}" -gt 0 ]; then
    avg_speedup=$(( ${avg_ctrl_time} / ${avg_mult_time} ))
    printf 'Avg. speedup (int): %8dx\n' "${avg_speedup}"
  fi
}

# SCRIPT -----------------------------------------------------------------------

# Check first argument for accepted flags.
case "$1" in
  -c | --clean)
    echo 'Running "make clean"'
    make clean
    exit
    ;;


  -d | --debug)
    cppflag='-DDEBUG'
    shift
    run_with "$@"
    exit 0
    ;;


  '' | -h | --help)
    echo "${USAGE}"
    exit 0
    ;;


  -r)
    shift
    case "$#" in
      2 | 5)                    # Custom reps
        natural_num "$1" || exit_error 3 "$1"
        repeats="$1"
        shift
        ;;
      1 | 4) ;;                 # Default reps
          *) exit_error 4 ;;
    esac
    repeat "$@"
    exit 0
    ;;


  --repeat)
    shift
    case "$#" in
      1 | 4) repeat "$@"  ;;    # Default reps
          *) exit_error 4 ;;
    esac
    exit 0
    ;;


  --repeat=[0-9]*)

    # Extract reps from argument
    input_reps=$( echo "$1" | grep -o '[0-9]\+$' )
    if [ -n "${input_reps}" ]; then
      repeats="${input_reps}"
    else
      exit_error 3 $( echo "$1" | grep -o '[0-9].*' )
    fi

    shift
    case "$#" in
      1 | 4) repeat "$@"  ;;    # Default reps
          *) exit_error 4 ;;
    esac
    exit 0
    ;;
esac

run_with "$@"   # No accepted flags -> expect matrix dimensions
